{"version":3,"sources":["Store/actionNames.ts","Components/VirtualizedTable/VirtualizedTableAction.ts","Components/VirtualizedTable/VirtualizedTableProps.ts","Components/VirtualizedTable/VirtualizedTableReducer.ts","shared/utils.ts","inversify/inversifyTypes.ts","inversify/inverisfyContainer.ts","Components/InputField.tsx","Components/SearchButton.tsx","Components/SortButton.tsx","Components/VirtualizedTable/VirtualizedTable.tsx","Components/VirtualizedTable/VirtualizedTableSelectors.ts","Components/VirtualizedTable/VirtualizedTableContainer.tsx","App.tsx","Store/reducers.ts","Store/sagas.ts","Store/index.ts","index.tsx"],"names":["SORT_DIRECTION_CHANGED","FILTER_NAME_CHANGED","FILTER_VALUE_CHANGED","GET_LIST","VirtualizedTableAction","injectable","getList","type","payload","sortDirectionChanged","sortField","sortDirection","filterNameChanged","filterName","filterValueChanged","filterValue","VirtualizedTablePropsInitial","undefined","sortBy","sortDir","data","originalData","VirtualizedTableReducer","getReducer","state","action","reduce","this","count","newState","list","Array","keys","map","el","i","id","data1","data2","data3","data4","SERVICE_IDENTIFIER","Symbol","for","container","Container","bind","to","inSingletonScope","InputField","props","Input","style","marginLeft","onChange","IconButton","onClick","onClose","SearchButton","SortButton","color","selected","direction","VirtualizedTable","useState","hoveredRowIndex","setHoveredRowIndex","actions","useEffect","console","log","columns","renderCell","records","columnIndex","rowIndex","className","columnName","text","onMouseEnter","headerNames","headerElements","header","filterButton","buttons","sortElement","sortButton","name","handleSortClick","activeButton","element","getSortButton","filterElement","defaultInput","defaultButton","isActiveButton","input","getFilterButton","event","target","value","toString","display","flexDirection","zIndex","width","length","justifyContent","renderHeaders","rowHeight","columnCount","columnWidth","height","itemData","rowCount","getState","getData","connect","createSelector","params","tableData","resultedData","filter","match","RegExp","e","sortableData","sort","a","b","parsedA","Number","parseInt","parsedB","isNaN","localeCompare","reverse","subjectList","dispatch","get","bindActionCreators","App","virtualizedList","createRootReducer","combineReducers","rootSaga","all","sagaMiddleware","createSagaMiddleware","middlewares","logger","rootReducerWithRouter","store","compose","applyMiddleware","createStore","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73f0338a.chunk.js","sourcesContent":["\r\nexport const SELECT_TABLE_ROW = \"SELECT_TABLE_ROW\" as const\r\nexport const SORT_DIRECTION_CHANGED = \"SORT_DIRECTION_CHANGED\" as const\r\nexport const FILTER_NAME_CHANGED = \"FILTER_NAME_CHANGED\" as const\r\nexport const FILTER_VALUE_CHANGED = \"FILTER_VALUE_CHANGED\" as const\r\nexport const GET_LIST = \"GET_LIST\" as const\r\nexport const SET_HEADERS = \"SET_HEADERS\" as const","\r\nimport { injectable } from 'inversify';\r\nimport { Column, SortDirection } from 'typings';\r\nimport { ActionTypePayload, FilterNamePayload, FilterValuePayload, SortPayload } from 'typings/payloads';\r\nimport { FILTER_NAME_CHANGED, FILTER_VALUE_CHANGED, GET_LIST, SET_HEADERS, SORT_DIRECTION_CHANGED } from '../../Store/actionNames';\r\n\r\n\r\n@injectable()\r\nexport class VirtualizedTableAction {\r\n    public getList = (): ActionTypePayload<any, any> => ({\r\n        type: GET_LIST,\r\n        payload: {\r\n        }\r\n    })\r\n\r\n    public sortDirectionChanged = (sortField: string, sortDirection: SortDirection): ActionTypePayload<SortPayload, any> => ({\r\n        type: SORT_DIRECTION_CHANGED,\r\n        payload: {\r\n            sortField, sortDirection\r\n        }\r\n    })\r\n\r\n    public filterNameChanged = (filterName: string | undefined): ActionTypePayload<FilterNamePayload, any> => ({\r\n        type: FILTER_NAME_CHANGED,\r\n        payload: {\r\n            filterName\r\n        }\r\n    })\r\n\r\n    public filterValueChanged = (filterValue: string | undefined): ActionTypePayload<FilterValuePayload, any> => ({\r\n        type: FILTER_VALUE_CHANGED,\r\n        payload: {\r\n            filterValue\r\n        }\r\n    })\r\n\r\n\r\n    \r\n}","import { VirtualizedTableReduxProps } from \"./VirtualizedTable\";\r\n\r\nexport const VirtualizedTablePropsInitial: VirtualizedTableReduxProps = {\r\n    filterName: undefined,\r\n    filterValue: undefined,\r\n    sortBy: 'id',\r\n    sortDir: 'desc',\r\n    data: [],\r\n    originalData: []\r\n};\r\n","import { injectable } from 'inversify';\r\nimport { range } from 'shared/utils';\r\nimport { ActionTypePayload, FilterNamePayload, FilterValuePayload, SortPayload } from 'typings/payloads';\r\nimport { FILTER_NAME_CHANGED, FILTER_VALUE_CHANGED, GET_LIST, SET_HEADERS, SORT_DIRECTION_CHANGED } from '../../Store/actionNames';\r\nimport { Subject, VirtualizedTableReduxProps } from './VirtualizedTable';\r\nimport { VirtualizedTablePropsInitial } from './VirtualizedTableProps';\r\n\r\n@injectable()\r\nexport class VirtualizedTableReducer {\r\n    public reduce(state: VirtualizedTableReduxProps = VirtualizedTablePropsInitial, action: any): any {        \r\n        switch (action.type) {\r\n            case GET_LIST:\r\n                return this.getList(state, action.payload)\r\n            case SORT_DIRECTION_CHANGED:\r\n                return this.sortDirectionChanged(state, action.payload)\r\n            case FILTER_NAME_CHANGED:\r\n                return this.filterNameChanged(state, action.payload)\r\n            case FILTER_VALUE_CHANGED:\r\n                return this.filterValueChanged(state, action.payload)\r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n\r\n    public getReducer = (): (state: VirtualizedTableReduxProps, action: ActionTypePayload<any, any>) => VirtualizedTableReduxProps => {\r\n        return (state: VirtualizedTableReduxProps, action: ActionTypePayload<any, any>): VirtualizedTableReduxProps =>\r\n            this.reduce(state, action);\r\n    }\r\n\r\n    protected getList(state: VirtualizedTableReduxProps, payload: any): VirtualizedTableReduxProps {\r\n        const newState = {...state};\r\n\r\n        const list = range(50000).map((el, i) => ({\r\n            id: i,\r\n            data1: `data1 ${i}`,\r\n            data2: `data2 ${i}`,\r\n            data3: `data3 ${i}`,\r\n            data4: `data4 ${i}`,\r\n        }));\r\n\r\n        newState.data = list\r\n        newState.originalData = list\r\n\r\n        return newState;\r\n    }\r\n\r\n\r\n    protected filterValueChanged(state: VirtualizedTableReduxProps, payload: FilterValuePayload): VirtualizedTableReduxProps {\r\n        const newState = {...state};\r\n\r\n        newState.filterValue = payload.filterValue\r\n\r\n        return newState;\r\n    }\r\n\r\n    protected filterNameChanged(state: VirtualizedTableReduxProps, payload: FilterNamePayload): VirtualizedTableReduxProps {\r\n        const newState = {...state};\r\n\r\n        newState.filterName = payload.filterName  \r\n        newState.filterValue = undefined        \r\n\r\n        return newState;\r\n    }\r\n\r\n    protected sortDirectionChanged(state: VirtualizedTableReduxProps, payload: SortPayload): VirtualizedTableReduxProps {\r\n        const newState = {...state};\r\n\r\n        newState.sortBy = payload.sortField\r\n        newState.sortDir = payload.sortDirection\r\n\r\n        return newState;\r\n    }\r\n\r\n}\r\n","import { SortDirection } from \"typings\";\r\n\r\nexport const range = (count: number) => [...Array(count).keys()];\r\n\r\nexport const reverseDirection = (direction: SortDirection): SortDirection => direction === 'desc' ? 'asc' : 'desc'","export const SERVICE_IDENTIFIER = {\r\n    VirtualizedTableAction: Symbol.for('VirtualizedTableAction'),\r\n    VirtualizedTableReducer: Symbol.for('VirtualizedTableReducer')\r\n};","import { Container } from 'inversify';\r\nimport 'reflect-metadata';\r\nimport { VirtualizedTableAction } from '../Components/VirtualizedTable/VirtualizedTableAction';\r\nimport { VirtualizedTableReducer } from '../Components/VirtualizedTable/VirtualizedTableReducer';\r\n\r\nimport { SERVICE_IDENTIFIER } from './inversifyTypes';\r\n\r\nexport const container = new Container();\r\ncontainer.bind(SERVICE_IDENTIFIER.VirtualizedTableAction).to(VirtualizedTableAction).inSingletonScope();\r\ncontainer.bind(SERVICE_IDENTIFIER.VirtualizedTableReducer).to(VirtualizedTableReducer).inSingletonScope();\r\n\r\n","import { IconButton, Input } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport React from 'react';\r\n\r\nexport interface InputFieldProps {\r\n    onChange: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\r\n    onClose: () => void;\r\n}\r\n\r\nexport const InputField = (props: InputFieldProps) => {\r\n    return (\r\n        <>\r\n            <Input style={{ marginLeft: 5}} onChange={props.onChange} />\r\n            <IconButton onClick={props.onClose}>\r\n                <CloseIcon />\r\n            </IconButton>\r\n        </>\r\n    );\r\n};\r\n","import IconButton from '@material-ui/core/IconButton';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport React, { MouseEventHandler } from 'react';\r\n\r\nexport interface SearchButtonProps {\r\n    onClick: MouseEventHandler;\r\n}\r\n\r\nexport const SearchButton = (props: SearchButtonProps): React.ReactElement => {   \r\n    return (\r\n        <IconButton onClick={props.onClick}>\r\n            <SearchIcon />\r\n        </IconButton>\r\n    );\r\n};\r\n","import { IconButton } from '@material-ui/core';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport React, { MouseEventHandler } from 'react';\r\nimport { SortDirection } from '../typings';\r\n\r\nexport interface SortButtonProps {\r\n    onClick: MouseEventHandler;\r\n    selected: boolean;\r\n    direction: SortDirection;\r\n}\r\n\r\nexport const SortButton = (props: SortButtonProps): React.ReactElement => {    \r\n    return (\r\n        <IconButton color={props.selected ? 'primary' : 'default'} onClick={props.onClick}>\r\n            {props.direction === 'desc' ? <ArrowDownwardIcon /> : <ArrowUpwardIcon />}\r\n        </IconButton>\r\n    );\r\n\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { FixedSizeGrid } from 'react-window';\r\nimport { reverseDirection } from 'shared/utils';\r\nimport { Column, FilterButton, HeadersBaseSettings, SortButton as SortButtonType, SortDirection } from '../../typings';\r\nimport { InputField } from '../InputField';\r\nimport { SearchButton } from '../SearchButton';\r\nimport { SortButton } from '../SortButton';\r\nimport './VirtualizedTable.css';\r\nimport { VirtualizedTableAction } from './VirtualizedTableAction';\r\n\r\nexport type VirtualizedTableProps = {\r\n    columns: Column[];\r\n    actions: VirtualizedTableAction;\r\n    state: VirtualizedTableReduxProps\r\n};\r\n\r\nexport type VirtualizedTableReduxProps = {\r\n    sortBy: string;\r\n    sortDir: SortDirection;\r\n    filterName: string | undefined;\r\n    filterValue: string | undefined;\r\n    data: Subject[];\r\n    originalData: Subject[]\r\n};\r\n\r\nexport type Subject = {\r\n    id: number\r\n    data1: string\r\n    data2: string\r\n    data3: string\r\n    data4: string\r\n}\r\n\r\nexport const VirtualizedTable = (props: VirtualizedTableProps) => {\r\n    const [hoveredRowIndex, setHoveredRowIndex] = useState(null);\r\n    const { actions } = props;\r\n    useEffect(() => {\r\n        actions.getList();\r\n    }, [actions]);\r\n\r\n    console.log(props);\r\n    \r\n    \r\n    const сolumnWidth = 200;\r\n\r\n    const getSortButton = (sortButton: SortButtonType | false | undefined, name: any, handleSortClick: () => void) => {\r\n        const activeButton = name === props.state.sortBy;\r\n\r\n        if (sortButton === false) {\r\n            return null;\r\n        }\r\n\r\n        if (sortButton === undefined) {\r\n            return (\r\n                <SortButton\r\n                    onClick={handleSortClick}\r\n                    selected={activeButton}\r\n                    direction={activeButton ? props.state.sortDir : 'desc'}\r\n                />\r\n            );\r\n        }\r\n\r\n        return sortButton.element(handleSortClick, activeButton, props.state.sortDir);\r\n    };\r\n\r\n    const getFilterButton = (\r\n        filterButton: FilterButton | false | undefined,\r\n        name: any,\r\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\r\n        onClose: () => void,\r\n    ) => {\r\n        const defaultInput = <InputField onClose={onClose} onChange={onChange} />;\r\n        const defaultButton = <SearchButton onClick={() => actions.filterNameChanged(name as string)} />;\r\n        const isActiveButton = name === props.state.filterName;\r\n        if (filterButton === false) {\r\n            // если сказано, что false, то не рендерим компонент\r\n            return null;\r\n        }\r\n        if (filterButton === undefined) {\r\n            // если undefined(просто не инициализировано поле), то рендерим компонент по умолчанию\r\n            return isActiveButton ? defaultInput : defaultButton;\r\n        }\r\n\r\n        if (isActiveButton) {\r\n            // если любое из полей не передано, рендерим как дефолтное\r\n            return filterButton.input !== undefined ? filterButton.input(onChange, onClose) : defaultInput;\r\n        } else {\r\n            return filterButton.element !== undefined\r\n                ? filterButton.element(() => actions.filterNameChanged(name as string))\r\n                : defaultButton;\r\n        }\r\n    };\r\n\r\n    const renderHeaders = (headerNames: HeadersBaseSettings<any>): React.ReactNode => {\r\n        const headerElements = props.columns.map((header, i) => {\r\n            const filterButton = header.buttons?.filterButton;\r\n            const sortButton = header.buttons?.sortButton;\r\n\r\n            const handleSortClick = () => {\r\n                const sortDir = props.state.sortBy === header.text ? reverseDirection(props.state.sortDir) : 'asc' \r\n                actions.sortDirectionChanged(header.text, sortDir);\r\n            };\r\n\r\n            const handleFilterValueChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n                actions.filterValueChanged(event.target.value);\r\n            };\r\n\r\n            const onClose = () => {\r\n                actions.filterNameChanged(undefined);\r\n                actions.filterValueChanged(undefined);\r\n            };\r\n\r\n            const sortElement = getSortButton(sortButton, header.text, handleSortClick);\r\n            const filterElement = getFilterButton(filterButton, header.text, handleFilterValueChanged, onClose);\r\n\r\n            return (\r\n                <div\r\n                    key={header.text.toString()}\r\n                >\r\n                    {header.text}\r\n                    {filterElement}\r\n                    {sortElement}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return <div style={{ display: 'flex', flexDirection: 'row',  zIndex: 1, width: сolumnWidth * headerElements.length, justifyContent: 'space-around' }}>{headerElements}</div>;\r\n    };\r\n\r\n    const renderCell = (columns: Column[], records: any[]) => ({ columnIndex, data, rowIndex, style }: any) => {\r\n        const { hoveredRowIndex, setHoveredRowIndex } = data;\r\n        const className = hoveredRowIndex === rowIndex ? 'CellHovered' : 'Cell';\r\n        const columnName = columns[columnIndex].text;\r\n\r\n        return (\r\n            <div className={className} onMouseEnter={() => setHoveredRowIndex(rowIndex)} style={style}>\r\n                {props.state.data[rowIndex][columnName]}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const renderBody = (columns: Column[], records: any[]): React.ReactNode => (\r\n        <FixedSizeGrid\r\n            style={{ zIndex: 0 }}\r\n            rowHeight={100}\r\n            columnCount={props.columns.length}\r\n            columnWidth={сolumnWidth}\r\n            height={800}\r\n            itemData={{ hoveredRowIndex, setHoveredRowIndex }}\r\n            rowCount={props.state.data.length}\r\n            width={1100}\r\n        >\r\n            {renderCell(columns, records)}\r\n        </FixedSizeGrid>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {renderHeaders(props.columns as any)}\r\n            {renderBody(props.columns, props.state.data)}\r\n        </>\r\n    );\r\n};\r\n","import { createSelector } from 'reselect'\r\nimport { Subject, VirtualizedTableReduxProps } from './VirtualizedTable'\r\n\r\n\r\n\r\nconst getState = ({filterName, filterValue, sortBy,  sortDir}: VirtualizedTableReduxProps) => {\r\n    return {filterName, filterValue, sortBy, sortDir }\r\n}\r\n\r\nconst getData = ({data, originalData}: VirtualizedTableReduxProps) => {\r\n    return {data, originalData}\r\n}\r\n\r\nexport const makeTableState = () => {\r\n    return createSelector(\r\n        [ getState, getData ],\r\n        (params, tableData) => {\r\n            const {filterName, filterValue} = params\r\n\r\n            let resultedData = tableData.originalData\r\n            \r\n            if (filterName !== undefined && filterValue !== undefined) {\r\n                try{\r\n                    resultedData = tableData.originalData.filter(el => el[filterName].toString().match(new RegExp(filterValue)))\r\n                } catch (e) {}\r\n            }\r\n    \r\n            \r\n            const sortableData = [...resultedData].sort(( a: Subject, b: Subject ) => { \r\n                const parsedA = Number.parseInt(a[params.sortBy])\r\n                const parsedB = Number.parseInt(b[params.sortBy])\r\n    \r\n                if (isNaN(parsedA) && isNaN(parsedB)) {\r\n                    return a[params.sortBy].localeCompare(b[params.sortBy]) \r\n                } else {\r\n                    return parsedA - parsedB\r\n                }\r\n            })\r\n     \r\n    \r\n            if (params.sortDir === 'desc') {\r\n                return {...params, ...tableData, data: sortableData}\r\n            } else {\r\n                return {...params, ...tableData, data: sortableData.reverse()}\r\n            }\r\n\r\n        }\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AnyAction, bindActionCreators, Dispatch } from 'redux';\r\nimport { RootReducer } from 'Store/reducers';\r\nimport { container } from '../../inversify/inverisfyContainer';\r\nimport { SERVICE_IDENTIFIER } from '../../inversify/inversifyTypes';\r\nimport { VirtualizedTable } from './VirtualizedTable';\r\nimport { VirtualizedTableAction } from './VirtualizedTableAction';\r\nimport { makeTableState } from './VirtualizedTableSelectors';\r\n\r\nfunction VirtualizedTableContainer(props: any) {\r\n    return <VirtualizedTable {...props} />;\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\r\n    const actions = container.get<VirtualizedTableAction>(SERVICE_IDENTIFIER.VirtualizedTableAction);\r\n    return {\r\n        dispatch,\r\n        actions: {\r\n            ...bindActionCreators(\r\n                {\r\n                    filterNameChanged: actions.filterNameChanged,\r\n                    filterValueChanged: actions.filterValueChanged,\r\n                    sortDirectionChanged: actions.sortDirectionChanged,\r\n                    getList: actions.getList,\r\n                },\r\n                dispatch,\r\n            ),\r\n        },\r\n    };\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducer) => {\r\n    const tableData = makeTableState()\r\n\r\n    return {\r\n        state: tableData(state.subjectList)\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VirtualizedTableContainer);\r\n","import VirtualizedTableContainer from 'Components/VirtualizedTable/VirtualizedTableContainer';\r\nimport React from 'react';\r\nimport { Column } from './typings';\r\n\r\n\r\nfunction App() {\r\n    const columns: Column[] = [\r\n        { text: 'id' },\r\n        { text: 'data1' },\r\n        { text: 'data2' },\r\n        { text: 'data3' },\r\n        { text: 'data4' },\r\n    ];\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <VirtualizedTableContainer columns={columns} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { VirtualizedTableReduxProps } from 'Components/VirtualizedTable/VirtualizedTable';\r\nimport { VirtualizedTableReducer } from 'Components/VirtualizedTable/VirtualizedTableReducer';\r\nimport { container } from 'inversify/inverisfyContainer';\r\nimport { SERVICE_IDENTIFIER } from 'inversify/inversifyTypes';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst virtualizedList = container.get<VirtualizedTableReducer>(SERVICE_IDENTIFIER.VirtualizedTableReducer)\r\n\r\nexport type RootReducer = {\r\n    subjectList: VirtualizedTableReduxProps\r\n}\r\n\r\nconst createRootReducer = () => combineReducers({\r\n    subjectList: virtualizedList.getReducer()\r\n});\r\n\r\n\r\nexport default createRootReducer\r\n","import { all } from \"redux-saga/effects\";\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n\r\n    ])\r\n}\r\n","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport createRootReducer from \"./reducers\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./sagas\";\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst middlewares = [logger, sagaMiddleware ];\r\n\r\n\r\nconst rootReducerWithRouter = createRootReducer()\r\nexport type RootStore = ReturnType<typeof rootReducerWithRouter>\r\n\r\nexport const store = compose(applyMiddleware(...middlewares))(createStore)(rootReducerWithRouter);\r\n\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport {store} from \"./Store\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}